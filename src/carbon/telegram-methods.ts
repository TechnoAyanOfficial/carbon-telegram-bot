import fetch, { Response } from 'node-fetch';
import fs from 'fs';
import qs from 'querystring';
import FormData from 'form-data';
import { carbon } from './carbon';

const handleTelegramAPIErrors = (response: Response) => {
  if (!response.ok)
    throw Error(`${response.status}: ${response.statusText}, for method: ${response.url}`);
};

export const bot = (token: string) => {
  const baseURL = `https://api.telegram.org/bot${token}`;

  return {
    // sends a reply asking for carbon code generation
    sendReply: async (message: Message): Promise<boolean> => {
      try {
        const params = {
          parse_mode: 'Markdown',
          chat_id: message.chat.id,
          reply_to_message_id: message.message_id,
          text: 'Generate a code snippet with [Carbon](carbon.now.sh)?',
          disable_web_page_preview: true,
          reply_markup: JSON.stringify({
            inline_keyboard: [[{ text: 'Yes. ðŸ–¨', callback_data: 'yes' }]]
          })
        };
        const res = await fetch(`${baseURL}/sendMessage?${qs.stringify(params)}`);
        handleTelegramAPIErrors(res);
        return await (await res.json())?.ok;
      } catch (error) {
        console.error(error);
        throw Error(error);
      }
    },
    // sends the code snippet image generated by carbon.now.sh
    sendPhoto: async (message: Message): Promise<void> => {
      message?.text && (await carbon(message.text));
      const image = fs.createReadStream('./screenshot.png');
      const form = new FormData();
      form.append('photo', image);
      form.append('chat_id', message.chat.id);
      form.append('reply_to_message_id', message.message_id);
      try {
        const res = await fetch(`${baseURL}/sendPhoto`, {
          method: 'POST',
          body: form,
          headers: form.getHeaders()
        });
        handleTelegramAPIErrors(res);
      } catch (error) {
        console.error(error);
        throw Error(error);
      }
    },
    // edits the reply markup button sent by sendReply method
    editMessageReplyMarkup: async (
      chat_id: number | string,
      message_id: number,
      text: string
    ): Promise<void> => {
      const params = {
        chat_id,
        message_id,
        reply_markup: JSON.stringify({
          inline_keyboard: [[{ text, callback_data: 'clicked' }]]
        })
      };
      try {
        const res = await fetch(`${baseURL}/editMessageReplyMarkup?${qs.stringify(params)}`);
        handleTelegramAPIErrors(res);
      } catch (error) {
        console.error(error);
      }
    }
  };
};
